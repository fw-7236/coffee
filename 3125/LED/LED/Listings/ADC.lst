C51 COMPILER V9.54   ADC                                                                   03/19/2021 09:02:31 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE ADC
OBJECT MODULE PLACED IN .\Objects\ADC.obj
COMPILER INVOKED BY: F:\keil\C51\BIN\C51.EXE user\ADC.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ADC
                    -.lst) OBJECT(.\Objects\ADC.obj)

line level    source

   1          #include "OB38R08T1.h"
   2          #include "ADC.h"
   3          extern unsigned char CtrBuz(unsigned char ctr);
   4          unsigned int n_data    = 0x0000;
   5          bit          ADCfinish = 0;
   6          
   7          
   8          void ADC_Start(unsigned char n_ADC_CH)
   9          {
  10   1          ADCC2  = n_ADC_CH; //Set a new channel
  11   1          ADCC2 |= 0x80;      //ADC start conversion
  12   1      }
  13          
  14          void ADC_Init(void)
  15          {
  16   1          ADCC1 = d_ADCnEN0;                 //Set ADC channel
  17   1          ADCCS = d_ADCnEN1 | d_ADC_CLK_Sel; //Set ADC channel & Select ADC clock
  18   1          IEADC = 1;                         //Enable ADC interrupt.
  19   1          EA    = 1;
  20   1      }
  21          
  22          unsigned int ADC_Read12() //12-bit ADC
  23          {
  24   1          unsigned int n_ADCD12 = 0x0000;
  25   1          n_ADCD12 = (ADCDH<<4) | ADCDL;     //12-bit ADC
  26   1          return n_ADCD12;
  27   1      }
  28          
  29          void ADCInterrupt(void) interrupt d_ADC_Vector // ADC Interrupt Vector Address 0053h => interrupt 10
  30          {
  31   1          n_data = ADC_Read12(); //Read ADC
  32   1          ADCfinish = 1;
  33   1      }
  34          //void Delayus(unsigned int tim)
  35          //{
  36          //    unsigned int  i,j;
  37          //    for (i=0; i<tim; i++)
  38          //        for (j=0; j<100; j++);
  39          //}
  40          
  41          void ADC(void)
  42          {
  43   1      //    if (d_ADCnEN0 & 0x01)
  44   1      //    {
  45   1      //        ADC_Start(d_ADC_CH0_IN);
  46   1      //        while(!ADCfinish);
  47   1      //        ADCfinish = 0;
  48   1      //    }
  49   1      //    if (d_ADCnEN0 & 0x02)
  50   1      //    {
  51   1      //        ADC_Start(d_ADC_CH1_IN);
  52   1      //        while(!ADCfinish);
  53   1      //        ADCfinish = 0;
  54   1      //    }
C51 COMPILER V9.54   ADC                                                                   03/19/2021 09:02:31 PAGE 2   

  55   1      //    if (d_ADCnEN0 & 0x04)
  56   1      //    {
  57   1      //        ADC_Start(d_ADC_CH2_IN);
  58   1      //        while(!ADCfinish);
  59   1      //        ADCfinish = 0;
  60   1      //    }
  61   1      //    if (d_ADCnEN0 & 0x08)
  62   1      //    {
  63   1      //        ADC_Start(d_ADC_CH3_IN);
  64   1      //        while(!ADCfinish);
  65   1      //        ADCfinish = 0;
  66   1      //    }
  67   1          if (d_ADCnEN0 & 0x10)
  68   1          {
  69   2              ADC_Start(d_ADC_CH4_IN);
  70   2              while(!ADCfinish);
  71   2              ADCfinish = 0;
  72   2          }
  73   1      //    if (d_ADCnEN0 & 0x20)
  74   1      //    {
  75   1      //        ADC_Start(d_ADC_CH5_IN);
  76   1      //        while(!ADCfinish);
  77   1      //        ADCfinish = 0;
  78   1      //    }
  79   1      //    if (d_ADCnEN0 & 0x40)
  80   1      //    {
  81   1      //        ADC_Start(d_ADC_CH6_IN);
  82   1      //        while(!ADCfinish);
  83   1      //        ADCfinish = 0;
  84   1      //    }
  85   1      //    if (d_ADCnEN0 & 0x80)
  86   1      //    {
  87   1      //        ADC_Start(d_ADC_CH7_IN);
  88   1      //        while(!ADCfinish);
  89   1      //        ADCfinish = 0;
  90   1      //    }
  91   1      //    if (d_ADCnEN1 & 0x40)
  92   1      //    {
  93   1      //        ADC_Start(d_ADC_CH8_IN);
  94   1      //        while(!ADCfinish);
  95   1      //        ADCfinish = 0;
  96   1      //    }
  97   1      //    if (d_ADCnEN1 & 0x80)
  98   1      //    {
  99   1      //        ADC_Start(d_ADC_BG_IN);
 100   1      //        while(!ADCfinish);
 101   1      //        ADCfinish = 0;
 102   1      //    }
 103   1      }
 104          
 105          unsigned int GetADCCalVal()
 106          {
 107   1          unsigned char xdata i=0;
 108   1          unsigned int xdata OKVal=0;
 109   1          unsigned int xdata total=0;
 110   1          OKVal=0;
 111   1          for(i=0; i<10; i++)
 112   1          {
 113   2              ADC();
 114   2              if((n_data>220)&&(n_data<3870))//除掉无效值
 115   2              {
 116   3                  total+=n_data;
C51 COMPILER V9.54   ADC                                                                   03/19/2021 09:02:31 PAGE 3   

 117   3                  OKVal++;
 118   3              }
 119   2          }
 120   1          if(OKVal>6)
 121   1          {
 122   2              return total/OKVal;//返回平均值
 123   2          }
 124   1          return 0;
 125   1      }
 126          
 127          
 128          #define  RL1       10//下拉电阻10K  20
 129          #define  RDUB      24//双杯电阻
 130          #define  RSIG      62//单杯电阻
 131          #define  RTMP1     12//按键电阻 手动
 132          #define  RTMP2     7.5//温度1电阻
 133          #define  CLAER     4.3//温度2电阻
 134          
 135          #define  SING_AD      568
 136          #define  DBU_AD       1204
 137          #define  TMP1_AD      1861
 138          #define  TMP2_AD      2340
 139          #define  CLEAR_AD     2864
 140          #define  SET_AD       1500
 141          #define  KEY_OFFSET   150
 142          
 143          unsigned char GetADKey(void)
 144          {
 145   1          unsigned int xdata ADValc=0;
 146   1          ADValc=GetADCCalVal();
 147   1          if((ADValc>(SING_AD-KEY_OFFSET))&&(ADValc<(SING_AD+KEY_OFFSET)))
 148   1          {
 149   2              return AD_SIG_KEY;
 150   2          }
 151   1          else if((ADValc>(DBU_AD-KEY_OFFSET))&&(ADValc<(DBU_AD+KEY_OFFSET)))
 152   1          {
 153   2              return AD_DU_KEY;
 154   2          }
 155   1          else if((ADValc>(CLEAR_AD-KEY_OFFSET))&&(ADValc<(CLEAR_AD+KEY_OFFSET)))
 156   1          {
 157   2              return AD_CLEAR_KEY;
 158   2          }
 159   1          else if((ADValc>(TMP1_AD-KEY_OFFSET))&&(ADValc<(TMP1_AD+KEY_OFFSET)))
 160   1          {
 161   2              return AD_TMP1_KEY;
 162   2          }
 163   1          else if((ADValc>(TMP2_AD-KEY_OFFSET))&&(ADValc<(TMP2_AD+KEY_OFFSET)))
 164   1          {
 165   2              return AD_TMP2_KEY;
 166   2          }
 167   1              else if((ADValc>(SET_AD-KEY_OFFSET))&&(ADValc<(SET_AD+KEY_OFFSET)))
 168   1          {
 169   2              return AD_SET_KEY;
 170   2          }
 171   1          return 0;
 172   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    376    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       7
C51 COMPILER V9.54   ADC                                                                   03/19/2021 09:02:31 PAGE 4   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
